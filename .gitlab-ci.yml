stages:
  - build
  - test
  - sonar
  - security

variables:
  DOTNET_VERSION: "8.0"

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:$DOTNET_VERSION
  script:
    - dotnet restore
    - dotnet build --configuration Release --no-restore

test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:$DOTNET_VERSION
  script:
    - dotnet test --no-build --verbosity normal

sonar:
  stage: sonar
  image: mcr.microsoft.com/dotnet/sdk:${DOTNET_VERSION}
  script:
    - dotnet tool install --global dotnet-sonarscanner
    - export PATH="$PATH:$HOME/.dotnet/tools"
    - dotnet sonarscanner begin /k:"your-project-key" /o:"your-organization" /d:sonar.login="$SONAR_TOKEN" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" # Replace your-project-key & your-organization with values from SonarQube dashboard
    - dotnet build ./src/DotnetSample.API/DotnetSample.API.csproj -c Release # Add all your projects here for sonarqube scanning
    - dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
  only:
    - merge_requests
    - main

trivy:
  stage: security
  image: docker:latest
  services:
    - name: docker:dind
      command: ["--host=tcp://0.0.0.0:2375", "--tls=false"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
    - export PATH="$PATH:./bin"
  script:
    - ./bin/trivy fs --exit-code 1 --severity CRITICAL,HIGH ./src # Modify the directory as per your project need.
    - docker build -t dotnet-sample:latest . # Change dotnet-sample to your project name as needed, can also build as many images as needed and run trivy command below on all of them.
    - ./bin/trivy image --exit-code 1 --severity CRITICAL,HIGH dotnet-sample:latest # Fails on critical and high vulnerabilities, adjust as needed.
